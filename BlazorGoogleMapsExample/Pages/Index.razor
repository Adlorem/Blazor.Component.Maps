@page "/"
@using Blazor.Component.Maps.Geolocation
@inject IGeolocationService _geolocationService;


<PageTitle>Index</PageTitle>

<h1>Hello, map!</h1>

<div class="row pb-2">
	<div class="col-12">
		<p><strong>Rendered Google JavaScript Maps:</strong></p>

		<GoogleMap @ref="_googleMap"		
					ApiKey="@_googleMapsApiKey" />

		@*<GoogleMap @bind-Center="_jsMapCenter" @bind-Center:event="OnMapCenterChanged"
					@bind-Zoom="_jsMapZoomLevel" @bind-Zoom:event="OnMapZoomLevelChanged"
					OnMapInitialized="@(() => {})"
					ApiKey="@_googleMapsApiKey" />*@

	</div>
</div>

@code{
	private string _googleMapsApiKey = "AIzaSyAS3-6ig6ZJ91ri56jUIYMAymZjv87yT8s";
	//Javascript Maps
	private GoogleMap _googleMap;
	private GeolocationData _jsMapCenter = new GeolocationData("Times Square New York");
	private string _jsMapBackgroundColor = "lightblue";
	private int _jsMapControlSize = 38;
	private byte _jsMapZoomLevel = 10;
	private int _jsMapWidth = 450;
	private int _jsMapHeight = 250;
	private bool _jsMapCenterCurrentLocation = true; //Overrides Center. Async operation which micht fail with Location services
	private GoogleMapTypes _jsMapType = GoogleMapTypes.Roadmap;
	private byte _jsTilt = 0;
	private int _jsHeading = 0;
	private bool _jsMapAnimateCenterChange = true;
	private bool _jsClickableIcons = true;
	private bool _jsDisableDefaultUI = false;
	private bool _jsDisableDoubleClickZoom = false;
	private bool _jsFullscreenControl = true;
	private GoogleMapControlPositions _jsFullscreenControlPositon = GoogleMapControlPositions.TOP_RIGHT;
	private GoogleMapGestureHandlingTypes _jsGestureHandling = GoogleMapGestureHandlingTypes.Auto;
	private bool _jsKeyboardShortcuts = true;
	private bool _jsMapTypeControl = true;
	private GoogleMapTypeControlOptions _jsMapTypeControlOptions = new GoogleMapTypeControlOptions()
	{
		MapTypeControlStyle = GoogleMapTypeControlStyles.DROPDOWN_MENU,
	};
	private bool _jsRotateControl = true;
	private bool _jsScaleControl = true;
	private bool _jsStreetViewControl = true;
	private bool _jsZoomControl = true;

	private List<GoogleMapCustomControl> _jsCustomControls = new List<GoogleMapCustomControl>();
	private ObservableRangeCollection<GoogleMapMarker> _jsMarkers = new ObservableRangeCollection<GoogleMapMarker>();
	private ObservableRangeCollection<GoogleMapMarker> _jsMarkersTmp = new ObservableRangeCollection<GoogleMapMarker>();

	private ElementReference _log;
	private string _mapsLog;
	private bool _logMouseMove = false;
	private bool _logOtherMouseEvents = true;
	private bool _logDragEvents = true;
	private bool _logCenterChangeEvents = true;
	private bool _logOtherEvents = true;
	private bool _logMarkerEvents = true;

	private bool _jsMapCenterOnClick = true;
	private bool _jsMapAddMarkerOnClick = true;

	private Func<string, Task> _jsMapMarkersClickCallback;
	private Func<string, GeolocationCoordinate, Task> _jsMapMarkersDragCallback;
	private Func<string, GeolocationCoordinate, Task> _jsMapMarkersDragEndCallback;
	private Func<string, GeolocationCoordinate, Task> _jsMapMarkersDragStartCallback;

	private bool _jsPhotosAdded = false;
	public async Task AddPhotos()
	{
		if (_jsPhotosAdded)
			return;

		_jsPhotosAdded = true;
		_jsMarkers.Add(new GoogleMapMarker(new GeolocationCoordinate(36.05257747885196, 14.188007522784417))
		{
			Draggable = false,
			Clickable = true,
			InfoWindow = new GoogleMapInfoWindow()
			{
				Content = $"<h4>Azure Window</h4> <div><a href=\"https://www.flickr.com/photos/135037635@N03/33200850951/in/album-72157655977338469/\" target=\"_blank\"><img src=\"https://live.staticflickr.com/3884/33200850951_079a7fd7e4_b.jpg\" width=\"200\" height=\"150\"></a></div>",
				MaxWidth = 400
			},
		});
		_jsMarkers.Add(new GoogleMapMarker(new GeolocationCoordinate(34.89426050000001, -115.701769))
		{
			Draggable = false,
			Clickable = true,
			InfoWindow = new GoogleMapInfoWindow()
			{
				Content = $"<h4>Kelso Dunes</h4> <div><a href=\"https://www.flickr.com/photos/135037635@N03/49503272657/\" target=\"_blank\"><img src=\"https://live.staticflickr.com/65535/49503272657_f8dd72c868_b.jpg\" width=\"200\" height=\"150\"></a></div>",
				MaxWidth = 400
			},
		});
		_jsMarkers.Add(new GoogleMapMarker(new GeolocationCoordinate(46.917456137488685, 19.83780860614538))
		{
			Draggable = false,
			Clickable = true,
			InfoWindow = new GoogleMapInfoWindow()
			{
				Content = $"<h4>Sunset Sky</h4> <div><a href=\"https://www.flickr.com/photos/135037635@N03/22769636223/in/album-72157655977338469/\" target=\"_blank\"><img src=\"https://live.staticflickr.com/5650/22769636223_7cd63b9fc4_b.jpg\" width=\"200\" height=\"150\"></a></div>",
				MaxWidth = 400
			},
		});
	}

	//Events
	private async Task OnMapInitialized(string elementId)
	{
		_mapsLog = await WriteLog(_mapsLog, $"Map was initialized container DIV Id: '{elementId}'");
	}
	private async Task OnMapClicked(GeolocationCoordinate coordinate)
	{
		if (_logOtherMouseEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map was clicked at: '{coordinate.ToString()}'");
		}

		if (_jsMapCenterOnClick)
		{
			_jsMapCenter = new GeolocationData(coordinate.Latitude, coordinate.Longitude); //Two-way binding with event value
		}

		if (_jsMapAddMarkerOnClick)
		{
			_jsMarkers.Add(new GoogleMapMarker(new GeolocationCoordinate(coordinate.Latitude, coordinate.Longitude))
			{
				AnchorPoint = new Point() { X = -10, Y = -35 },
				Animation = GoogleMapMarkerAnimationTypes.DROP,
				Clickable = true,
				CrossOnDrag = true,
				Cursor = "drag",
				Draggable = true,
				Label = new GoogleMapMarkerLabel("Marker Label"),
				Icon = new GoogleMapMarkerLabelIcon("https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png")
				{ LabelOrigin = new Point() { Y = 20, X = 5 } },
				Opacity = 0.75,
				Optimized = true,
				Shape = new GoogleMapMarkerShape()
				{ ShapeType = GoogleMapMarkerShapeTypes.Poly, Coords = new int[] { 1, 1, 1, 20, 18, 20, 18, 1 } },
				Title = "Clicked positon marker...",
				Visible = true,
				ZIndex = 1,
				InfoWindow = new GoogleMapInfoWindow()
				{
					Content = $"<div>User clicked at postion: {coordinate.ToString()}</div>",
					MaxWidth = 200
				},

				OnClickCallback = _jsMapMarkersClickCallback,
				OnDragCallback = _jsMapMarkersDragCallback,
				OnDragStartCallback = _jsMapMarkersDragStartCallback,
				OnDragEndCallback = _jsMapMarkersDragEndCallback
			});
		}
	}
	private async Task OnMapDoubleClicked(GeolocationCoordinate coordinate)
	{
		if (_logOtherMouseEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map was double clicked at: {coordinate.ToString()}");
		}
	}
	private async Task OnMapContextMenu(GeolocationCoordinate coordinate)
	{
		if (_logOtherMouseEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map context menu opened at: {coordinate.ToString()}");
		}
	}
	private async Task OnMapMouseUp(GeolocationCoordinate coordinate)
	{
		if (_logOtherMouseEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map mouse button Up at: {coordinate.ToString()}");
		}
	}
	private async Task OnMapMouseDown(GeolocationCoordinate coordinate)
	{
		if (_logOtherMouseEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map mouse button Down at: {coordinate.ToString()}");
		}
	}
	private async Task OnMouseMove(GeolocationCoordinate coordinate)
	{
		if (_logMouseMove)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map mouse moved to: {coordinate.ToString()}");
		}
	}
	private async Task OnMapMouseOver()
	{
		if (_logOtherMouseEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map mouse (over) entered into Maps area");
		}
	}
	private async Task OnMapMouseOut()
	{
		if (_logOtherMouseEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map mouse (out) leaved Maps area");
		}
	}

	private async Task OnMapCenterChanged(GeolocationData coordinate)
	{
		//Can be used with Binding and custom event: @bind-Center="_jsMapCenter" @bind-Center:event="OnMapCenterChanged"
		if (_logCenterChangeEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map Center location changed to: {coordinate.ToString()}");
		}
		_jsMapCenter = new GeolocationData(coordinate.Latitude, coordinate.Longitude); //Two-way binding with event value
	}
	private async Task OnMapZoomLevelChanged(byte zoom)
	{
		//Can be used with Binding and custom event: @bind-Zoom="_jsMapZoomLevel" @bind-Zoom:event="OnMapZoomLevelChanged"
		if (_logOtherEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map Zoom level changed to: {zoom}");
		}
		_jsMapZoomLevel = zoom;  //Two-way binding with event value
	}
	private async Task OnMapTypeChanged(GoogleMapTypes googleMapTypes)
	{
		//Can be used with Binding and custom event: @bind-MapType="_jsMapType" @bind-MapType:event="OnMapTypeChanged"
		if (_logOtherEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map type changed to: {googleMapTypes}");
		}
		_jsMapType = googleMapTypes; //Two-way binding with event value
	}
	private async Task OnMapHeadingChanged(int heading)
	{
		//Can be used with Binding and custom event: @bind-Heading="_jsHeading" @bind-ZoomLevel:event="OnMapHeadingChanged"
		if (_logOtherEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map Heading changed to: {heading}");
		}
		_jsHeading = heading;  //Two-way binding with event value
	}
	private async Task OnMapTiltChanged(byte tilt)
	{
		//Can be used with Binding and custom event: @bind-Tilt="_jsTilt" @bind-ZoomLevel:event="OnMapTiltChanged"
		if (_logOtherEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map Tilt changed to: {tilt}");
		}
		_jsTilt = tilt;  //Two-way binding with event value
	}

	private async Task OnMapBoundsChanged()
	{
		if (_logOtherEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map boundaries changed");
		}
	}
	private async Task OnMapProjectionChanged()
	{
		if (_logOtherEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map projection changed");
		}
	}
	private async Task OnMapDraggableChanged()
	{
		if (_logOtherEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map draggable changed");
		}
	}
	private async Task OnMapStreetviewChanged()
	{
		if (_logOtherEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map Streetview changed");
		}
	}

	private async Task OnMapDrag(GeolocationCoordinate coordinate)
	{
		if (_logDragEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map Draging at: {coordinate.ToString()}");
		}
	}
	private async Task OnMapDragEnd(GeolocationCoordinate coordinate)
	{
		if (_logDragEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map Drag End at: {coordinate.ToString()}");
		}
	}
	private async Task OnMapDragStart(GeolocationCoordinate coordinate)
	{
		if (_logDragEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map Drag Start at: {coordinate.ToString()}");
		}
	}

	private async Task OnMapResized(Rect rect)
	{
		if (_logOtherEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map was resized to: {rect.ToString()}");
		}
	}
	private async Task OnMapTilesLoaded()
	{
		if (_logOtherEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map tiles loaded");
		}
	}
	private async Task OnMapIdle()
	{
		if (_logOtherEvents)
		{
			_mapsLog = await WriteLog(_mapsLog, $"Map idle");
		}
	}

	//Geolocation current position detection
	private async Task CenterMyLocationWithJavaScriptMap()
	{
		await _googleMap.CenterCurrentLocationOnMapAsync();
	}
	private async Task CenterMyLocationWithInjectedServiceJavaScript()
	{
		await _geolocationService.GetCurrentPositionAsync(async (pos) =>
		{
			if (pos.IsSuccess)
			{
				_jsMapCenter = new GeolocationData(pos.Coordinates.Latitude, pos.Coordinates.Longitude);
				StateHasChanged();
			}
		},
		false, TimeSpan.FromSeconds(10));
	}

	private async Task JavaScripMapLocationDetected(GeolocationData coordinate)
	{
		_jsMapCenter = coordinate; //JS Map callback when detected current location, must override initial value.
	}

	private object _lock = new object();
	private async Task<string> WriteLog(string log, string message)
	{
		lock (_lock)
		{
			log += $"{DateTime.Now.TimeOfDay}: {message}. \r\n";
		}

		return log;
	}
	public async ValueTask DisposeAsync()
	{
		if (_geolocationService is not null)
		{
			await _geolocationService.DisposeAsync();
		}
	}

}