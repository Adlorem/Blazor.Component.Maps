let _mapsElementDict = [], _placesElementDict = [], _mapsMarkers = [], _loadGoogleMaps = !1, _loadGoogleSearchPlaces = !1; export function init(e, t, n, i, o, l) { if (!e || !t || !n) return; _loadGoogleMaps = !0, storeElementIdWithDotnetRef(_mapsElementDict, t, n, i, o); let a = "https://maps.googleapis.com/maps/api/js?key=", d = !1, s = ""; if (1 == l && (s = "places"), document.querySelectorAll("head > script").forEach(e => { if (e) { let t = e.getAttribute("src"); if (t && t.startsWith(a)) return void (d = !0) } }), d) return void (window.google && window.initGoogleMaps()); let r = document.createElement("script"); r.src = "https://polyfill.io/v3/polyfill.min.js?features=default", document.head.appendChild(r), a = a + e + "&callback=initGoogleMaps&libraries=" + s + "&v=weekly"; let m = document.createElement("script"); m.src = a, m.defer = !0, document.head.appendChild(m) } export function initAutocomplete(e, t, n, i) { if (!(e && t && n && i)) return; _loadGoogleSearchPlaces = !0, storeSearchElementIdWithDotnetRef(_placesElementDict, t, n, i); let o = "https://maps.googleapis.com/maps/api/js?key=", l = !1; if (document.querySelectorAll("head > script").forEach(e => { if (e) { let t = e.getAttribute("src"); if (t && t.startsWith(o)) return void (l = !0) } }), l) return void (window.google && window.initGoogleMaps()); o = o + e + "&callback=initGoogleMaps&libraries=places&v=weekly"; let a = document.createElement("script"); a.src = o, a.defer = !0, document.head.appendChild(a) } function initializeSearchBoxes() { for (let e = 0; e < _placesElementDict.length; e++) { let t = _placesElementDict[e].key, n = _placesElementDict[e].value; const i = document.getElementById(t); let o = n.searchBoxId; o = new google.maps.places.Autocomplete(i), google.maps.event.addListener(o, "place_changed", function () { var n = o.getPlace(); 0 != n.length && (console.log(n), _placesElementDict[e].value.ref.invokeMethodAsync("PlacesChanged", n, t)) }), _placesElementDict[e].value.ref.invokeMethodAsync("PlacesInitialized", t) } } function initializeGoogleMaps() { for (let t = 0; t < _mapsElementDict.length; t++) { let n = _mapsElementDict[t].key, i = _mapsElementDict[t].value; if (_mapsElementDict[t].value.map) continue; let o = new google.maps.Map(document.getElementById(n), { backgroundColor: i.bgColor, controlSize: i.ctrSize }); function e(e, t) { if (o && o.elementId && e) { let n = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); if (n) { let i = e.latLng.toJSON(), o = { Latitude: i.lat, Longitude: i.lng }; n.ref.invokeMethodAsync(t, o) } } } o.elementId = n, _mapsElementDict[t].value.map = o, o.addListener("click", t => { e(t, "MapClicked") }), o.addListener("dblclick", t => { e(t, "MapDoubleClicked") }), o.addListener("contextmenu", t => { e(t, "MapContextMenu") }), o.addListener("mouseup", t => { e(t, "MapMouseUp") }), o.addListener("mousedown", t => { e(t, "MapMouseDown") }), o.addListener("mousemove", t => { e(t, "MapMouseMove") }), o.addListener("mouseover", () => { if (o && o.elementId) { let e = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); e && e.ref.invokeMethodAsync("MapMouseOver") } }), o.addListener("mouseout", () => { if (o && o.elementId) { let e = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); e && e.ref.invokeMethodAsync("MapMouseOut") } }), o.addListener("center_changed", () => { if (o && o.elementId) { let e = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); if (e && o.getCenter()) { let t = o.getCenter().toJSON(), n = { Latitude: t.lat, Longitude: t.lng }; e.ref.invokeMethodAsync("MapCenterChanged", n) } } }), o.addListener("zoom_changed", () => { if (o && o.elementId) { let e = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); e && e.ref.invokeMethodAsync("MapZoomChanged", o.getZoom()) } }), o.addListener("maptypeid_changed", () => { if (o && o.elementId) { let e = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); e && e.ref.invokeMethodAsync("MapTypeIdChanged", o.getMapTypeId()) } }), o.addListener("heading_changed", () => { if (o && o.elementId) { let e = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); e && e.ref.invokeMethodAsync("MapHeadingChanged", o.getHeading()) } }), o.addListener("tilt_changed", () => { if (o && o.elementId) { let e = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); e && e.ref.invokeMethodAsync("MapTiltChanged", o.getTilt()) } }), o.addListener("bounds_changed", () => { if (o && o.elementId) { let e = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); e && e.ref.invokeMethodAsync("MapBoundsChanged") } }), o.addListener("projection_changed", () => { if (o && o.elementId) { let e = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); e && e.ref.invokeMethodAsync("MapProjectionChanged") } }), o.addListener("draggable_changed", () => { if (o && o.elementId) { let e = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); e && e.ref.invokeMethodAsync("MapDraggableChanged") } }), o.addListener("streetview_changed", () => { if (o && o.elementId) { let e = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); e && e.ref.invokeMethodAsync("MapStreetviewChanged") } }), o.addListener("drag", () => { if (o && o.elementId) { let e = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); if (e && o.getCenter()) { let t = o.getCenter().toJSON(), n = { Latitude: t.lat, Longitude: t.lng }; e.ref.invokeMethodAsync("MapDrag", n) } } }), o.addListener("dragend", () => { if (o && o.elementId) { let e = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); if (e && o.getCenter()) { let t = o.getCenter().toJSON(), n = { Latitude: t.lat, Longitude: t.lng }; e.ref.invokeMethodAsync("MapDragEnd", n) } } }), o.addListener("dragstart", () => { if (o && o.elementId) { let e = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); if (e && o.getCenter()) { let t = o.getCenter().toJSON(), n = { Latitude: t.lat, Longitude: t.lng }; e.ref.invokeMethodAsync("MapDragStart", n) } } }), o.addListener("resize", () => { if (o && o.elementId) { let e = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); if (e) { let t = { Width: o.getDiv().offsetWidth, Height: o.getDiv().offsetHeight }; e.ref.invokeMethodAsync("MapResized", t) } } }), o.addListener("tilesloaded", () => { if (o && o.elementId) { let e = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); e && e.ref.invokeMethodAsync("MapTilesLoaded") } }), o.addListener("idle", () => { if (o && o.elementId) { let e = getElementIdWithDotnetRef(_mapsElementDict, o.elementId); e && e.ref.invokeMethodAsync("MapIdle") } }), _mapsElementDict[t].value.ref.invokeMethodAsync("MapInitialized", n) } } function storeSearchElementIdWithDotnetRef(e, t, n, i) { for (let t = 0; t < e.length; t++)if (e[t].key === n) return; e.push({ key: n, value: { ref: i, searchBoxId: t, elementId: n } }) } function storeElementIdWithDotnetRef(e, t, n, i, o) { for (let n = 0; n < e.length; n++)if (e[n].key === t) return; e.push({ key: t, value: { ref: n, map: null, bgColor: i, ctrSize: o } }) } function removeElementIdWithDotnetRef(e, t) { for (let n = 0; n < e.length; n++)if (e[n].key === t) { e.splice(n, 1); break } } function getElementIdWithDotnetRef(e, t) { for (let n = 0; n < e.length; n++)if (e[n].key === t) return e[n].value } window.initGoogleMaps = (() => { _loadGoogleMaps && initializeGoogleMaps(), _loadGoogleSearchPlaces && initializeSearchBoxes() }); export function setCenterCoords(e, t, n) { if (e) { let i = getElementIdWithDotnetRef(_mapsElementDict, e); i && i.map && i.map.setCenter({ lat: t, lng: n }) } } export function setCenterAddress(e, t) { if (e) { let n = getElementIdWithDotnetRef(_mapsElementDict, e); n && n.map && geocodeAddress(t, function (e) { e && n.map.setCenter(e[0].geometry.location) }) } } export function panToCoords(e, t, n) { if (e) { let i = getElementIdWithDotnetRef(_mapsElementDict, e); i && i.map && i.map.panTo({ lat: t, lng: n }) } } export function panToAddress(e, t) { if (e) { let n = getElementIdWithDotnetRef(_mapsElementDict, e); n && n.map && geocodeAddress(t, function (e) { e && n.map.panTo(e[0].geometry.location) }) } } export function setZoom(e, t) { if (e) { let n = getElementIdWithDotnetRef(_mapsElementDict, e); n && n.map && n.map.setZoom(t) } } export function setMapType(e, t) { if (e) { let n = getElementIdWithDotnetRef(_mapsElementDict, e); n && n.map && n.map.setMapTypeId(t) } } export function setHeading(e, t) { if (e) { let n = getElementIdWithDotnetRef(_mapsElementDict, e); n && n.map && n.map.setHeading(t) } } export function setTilt(e, t) { if (e) { let n = getElementIdWithDotnetRef(_mapsElementDict, e); n && n.map && n.map.setTilt(t) } } export function setClickableIcons(e, t) { if (e) { let n = getElementIdWithDotnetRef(_mapsElementDict, e); n && n.map && n.map.setClickableIcons(t) } } export function setOptions(e, t) { if (e) { let n = getElementIdWithDotnetRef(_mapsElementDict, e); n && n.map && n.map.setOptions(t) } } export function resizeMap(e) { if (e) { let t = getElementIdWithDotnetRef(_mapsElementDict, e); t && t.map && google.maps.event.trigger(t.map, "resize") } } export function createCustomControls(e, t) { if (e && t) { let i = getElementIdWithDotnetRef(_mapsElementDict, e); if (i && i.map) for (var n = 0; n < t.length; n++) { let e = t[n], o = document.createElement("div"); o.innerHTML = e.content, i.map.controls[e.controlPosition].push(o); let l = e.id, a = i.ref; o.addEventListener("click", () => { a.invokeMethodAsync("CustomControlClicked", l) }) } } } export function createMarkers(e, t) { if (e && t && t.length) { let o = getElementIdWithDotnetRef(_mapsElementDict, e); if (o && o.map) for (var n = 0; n < t.length; n++) { let e = t[n], l = new google.maps.Marker({ id: e.id, crossOnDrag: e.crossOnDrag, optimized: e.optimized }); if (l.setMap(o.map), setMarkerData(e, l), _mapsMarkers.push(l), e.clickable) { let t = null; e.infoWindow && (t = new google.maps.InfoWindow({ content: e.infoWindow.content, maxWidth: e.infoWindow.maxWidth })), l.addListener("click", () => { o.ref.invokeMethodAsync("MarkerClicked", e.id), t && t.open(o.map, l) }) } if (e.draggable) { function i(e, t, n) { let i = { Latitude: n.lat, Longitude: n.lng }; o.ref.invokeMethodAsync(e, t, i) } l.addListener("drag", () => { i("MarkerDrag", e.id, l.getPosition().toJSON()) }), l.addListener("dragend", () => { i("MarkerDragEnd", e.id, l.getPosition().toJSON()) }), l.addListener("dragstart", () => { i("MarkerDragStart", e.id, l.getPosition().toJSON()) }) } } } } export function removeMarkers(e, t) { if (e && t && t.length) { let i = getElementIdWithDotnetRef(_mapsElementDict, e); if (i && i.map) for (var n = 0; n < t.length; n++) { let e = t[n]; _mapsMarkers.forEach((t, n) => { if (e.id == t.id) return t.setMap(null), void _mapsMarkers.splice(n, 1) }) } } } function setMarkerData(e, t) { t && e && (t.setPosition({ lat: e.position.latitude, lng: e.position.longitude }), t.anchorPoint = e.anchorPoint ? { x: e.anchorPoint.x, y: e.anchorPoint.y } : null, t.setAnimation(e.animation), t.setClickable(e.clickable), t.crossOnDrag = e.crossOnDrag, t.setCursor(e.cursor), t.setDraggable(e.draggable), t.setIcon(e.icon), t.setLabel(e.label), t.setOpacity(e.opacity), t.optimized = e.optimized, t.setShape(e.shape), t.setTitle(e.title), t.setVisible(e.visible), t.setZIndex(e.zIndex)) } export function getAddressCoordinates(e, t) { geocodeAddress(t, function (t) { if (t) { let n = getElementIdWithDotnetRef(_mapsElementDict, e); n && n.map && n.ref.invokeMethodAsync("AddressSearch", t) } }) } function geocodeAddress(e, t) { (new google.maps.Geocoder).geocode({ address: e }, function (e, n) { n == google.maps.GeocoderStatus.OK && t(e) }) } export function dispose(e) { if (e) { let t = getElementIdWithDotnetRef(_mapsElementDict, e); t.map = null, t.ref = null, removeElementIdWithDotnetRef(_mapsElementDict, e) } }